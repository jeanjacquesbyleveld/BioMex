//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace BioMex_First.BioMexService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="BioMexService.IService1")]
    public interface IService1 {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/RegisterNewUser", ReplyAction="http://tempuri.org/IService1/RegisterNewUserResponse")]
        void RegisterNewUser(string name, string surname, string username, int age, string password, int passwordCount, int shiftClassification, int[] passwordSpeed, int[][] keyDowns, int[][] keyLatencies, int[][] pairedKeys, int[][] keyOrder, string keyDescClass);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/RegisterNewUser", ReplyAction="http://tempuri.org/IService1/RegisterNewUserResponse")]
        System.Threading.Tasks.Task RegisterNewUserAsync(string name, string surname, string username, int age, string password, int passwordCount, int shiftClassification, int[] passwordSpeed, int[][] keyDowns, int[][] keyLatencies, int[][] pairedKeys, int[][] keyOrder, string keyDescClass);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/LogUserIn", ReplyAction="http://tempuri.org/IService1/LogUserInResponse")]
        string LogUserIn(string user, string pass, int count, int shiftclass, int passwordSpeed, int negOrder, int[] keyorder, int[] keylatency, int[] keydowntime, int[] pairedkeys, string keyDescClass);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/LogUserIn", ReplyAction="http://tempuri.org/IService1/LogUserInResponse")]
        System.Threading.Tasks.Task<string> LogUserInAsync(string user, string pass, int count, int shiftclass, int passwordSpeed, int negOrder, int[] keyorder, int[] keylatency, int[] keydowntime, int[] pairedkeys, string keyDescClass);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/CheckUsernameAvailability", ReplyAction="http://tempuri.org/IService1/CheckUsernameAvailabilityResponse")]
        bool CheckUsernameAvailability(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/CheckUsernameAvailability", ReplyAction="http://tempuri.org/IService1/CheckUsernameAvailabilityResponse")]
        System.Threading.Tasks.Task<bool> CheckUsernameAvailabilityAsync(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/RetrieveKeyDownTime", ReplyAction="http://tempuri.org/IService1/RetrieveKeyDownTimeResponse")]
        int[] RetrieveKeyDownTime(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/RetrieveKeyDownTime", ReplyAction="http://tempuri.org/IService1/RetrieveKeyDownTimeResponse")]
        System.Threading.Tasks.Task<int[]> RetrieveKeyDownTimeAsync(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/RetrieveKeyLatency", ReplyAction="http://tempuri.org/IService1/RetrieveKeyLatencyResponse")]
        int[] RetrieveKeyLatency(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/RetrieveKeyLatency", ReplyAction="http://tempuri.org/IService1/RetrieveKeyLatencyResponse")]
        System.Threading.Tasks.Task<int[]> RetrieveKeyLatencyAsync(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/RetrievePairedKeyTime", ReplyAction="http://tempuri.org/IService1/RetrievePairedKeyTimeResponse")]
        int[] RetrievePairedKeyTime(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/RetrievePairedKeyTime", ReplyAction="http://tempuri.org/IService1/RetrievePairedKeyTimeResponse")]
        System.Threading.Tasks.Task<int[]> RetrievePairedKeyTimeAsync(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/ActivateService", ReplyAction="http://tempuri.org/IService1/ActivateServiceResponse")]
        bool ActivateService();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/ActivateService", ReplyAction="http://tempuri.org/IService1/ActivateServiceResponse")]
        System.Threading.Tasks.Task<bool> ActivateServiceAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/RetrieveDistances", ReplyAction="http://tempuri.org/IService1/RetrieveDistancesResponse")]
        int[] RetrieveDistances(string user, int passwordSpeed, int[] keyorder, int[] keylatency, int[] keydowntime, int[] pairedkeys);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/RetrieveDistances", ReplyAction="http://tempuri.org/IService1/RetrieveDistancesResponse")]
        System.Threading.Tasks.Task<int[]> RetrieveDistancesAsync(string user, int passwordSpeed, int[] keyorder, int[] keylatency, int[] keydowntime, int[] pairedkeys);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IService1Channel : BioMex_First.BioMexService.IService1, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Service1Client : System.ServiceModel.ClientBase<BioMex_First.BioMexService.IService1>, BioMex_First.BioMexService.IService1 {
        
        public Service1Client() {
        }
        
        public Service1Client(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public Service1Client(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void RegisterNewUser(string name, string surname, string username, int age, string password, int passwordCount, int shiftClassification, int[] passwordSpeed, int[][] keyDowns, int[][] keyLatencies, int[][] pairedKeys, int[][] keyOrder, string keyDescClass) {
            base.Channel.RegisterNewUser(name, surname, username, age, password, passwordCount, shiftClassification, passwordSpeed, keyDowns, keyLatencies, pairedKeys, keyOrder, keyDescClass);
        }
        
        public System.Threading.Tasks.Task RegisterNewUserAsync(string name, string surname, string username, int age, string password, int passwordCount, int shiftClassification, int[] passwordSpeed, int[][] keyDowns, int[][] keyLatencies, int[][] pairedKeys, int[][] keyOrder, string keyDescClass) {
            return base.Channel.RegisterNewUserAsync(name, surname, username, age, password, passwordCount, shiftClassification, passwordSpeed, keyDowns, keyLatencies, pairedKeys, keyOrder, keyDescClass);
        }
        
        public string LogUserIn(string user, string pass, int count, int shiftclass, int passwordSpeed, int negOrder, int[] keyorder, int[] keylatency, int[] keydowntime, int[] pairedkeys, string keyDescClass) {
            return base.Channel.LogUserIn(user, pass, count, shiftclass, passwordSpeed, negOrder, keyorder, keylatency, keydowntime, pairedkeys, keyDescClass);
        }
        
        public System.Threading.Tasks.Task<string> LogUserInAsync(string user, string pass, int count, int shiftclass, int passwordSpeed, int negOrder, int[] keyorder, int[] keylatency, int[] keydowntime, int[] pairedkeys, string keyDescClass) {
            return base.Channel.LogUserInAsync(user, pass, count, shiftclass, passwordSpeed, negOrder, keyorder, keylatency, keydowntime, pairedkeys, keyDescClass);
        }
        
        public bool CheckUsernameAvailability(string username) {
            return base.Channel.CheckUsernameAvailability(username);
        }
        
        public System.Threading.Tasks.Task<bool> CheckUsernameAvailabilityAsync(string username) {
            return base.Channel.CheckUsernameAvailabilityAsync(username);
        }
        
        public int[] RetrieveKeyDownTime(string username) {
            return base.Channel.RetrieveKeyDownTime(username);
        }
        
        public System.Threading.Tasks.Task<int[]> RetrieveKeyDownTimeAsync(string username) {
            return base.Channel.RetrieveKeyDownTimeAsync(username);
        }
        
        public int[] RetrieveKeyLatency(string username) {
            return base.Channel.RetrieveKeyLatency(username);
        }
        
        public System.Threading.Tasks.Task<int[]> RetrieveKeyLatencyAsync(string username) {
            return base.Channel.RetrieveKeyLatencyAsync(username);
        }
        
        public int[] RetrievePairedKeyTime(string username) {
            return base.Channel.RetrievePairedKeyTime(username);
        }
        
        public System.Threading.Tasks.Task<int[]> RetrievePairedKeyTimeAsync(string username) {
            return base.Channel.RetrievePairedKeyTimeAsync(username);
        }
        
        public bool ActivateService() {
            return base.Channel.ActivateService();
        }
        
        public System.Threading.Tasks.Task<bool> ActivateServiceAsync() {
            return base.Channel.ActivateServiceAsync();
        }
        
        public int[] RetrieveDistances(string user, int passwordSpeed, int[] keyorder, int[] keylatency, int[] keydowntime, int[] pairedkeys) {
            return base.Channel.RetrieveDistances(user, passwordSpeed, keyorder, keylatency, keydowntime, pairedkeys);
        }
        
        public System.Threading.Tasks.Task<int[]> RetrieveDistancesAsync(string user, int passwordSpeed, int[] keyorder, int[] keylatency, int[] keydowntime, int[] pairedkeys) {
            return base.Channel.RetrieveDistancesAsync(user, passwordSpeed, keyorder, keylatency, keydowntime, pairedkeys);
        }
    }
}
